package io.github.timemachinelab.core.constant;

public class QSelectPrompt {

    public final static String Q_SELECT_PROMPT =
            """
                    ## 选项形式的题目

                    ### 描述

                    针对单一维度问题提供多个预设选项，让用户快速选择而非自由输入。

                    ### 触发条件判断逻辑

                    AI评估用户输入和对话情况：

                    + 存在单一明确的选择性问题
                    + 可以预设3-6个合理选项覆盖主要情况
                    + 选项之间互斥或有明确优先级
                    + 用户自由回答可能过于宽泛或低效
                    + **优先级**：相比input类型应优先考虑使用，可以配合表单使用去设置多个选择题

                    ### 输出格式规范

                    + 你必须要按照标准的无误的 json 格式给我返回结果，其他的什么都不要给我

                    **单选类型**

                    ```json
                    {
                      "question": "选择问题描述",
                      "type": "single",
                      "parentId": "对话ID",
                      "options": [
                        {
                          "id": "选项标识",
                          "label": "选项显示文本"
                        }
                      ],
                      "desc": "问题的详细说明、引导提示或补充解释" // 可选
                    }
                    ```

                    **多选类型**

                    ```json
                    {
                      "question": "选择问题描述",
                      "type": "multi",
                      "parentId": "对话ID",
                      "options": [
                        {
                          "id": "选项标识",
                          "label": "选项显示文本"
                        }
                      ],
                      "desc": "问题的详细说明、引导提示或补充解释" // 可选
                    }
                    ```

                    ### 规则

                    **1. question字段生成规则**

                    + AI生成清晰的选择性问题
                    + 问题表述要让用户明确知道需要选择什么
                    + 保持简洁，一般不超过20字

                    **2. type字段规则**

                    + single：单选模式，用户只能选择一个选项
                    + multi：多选模式，用户可以选择多个选项
                    + **判断标准**：问题中包含"哪些"、"都有什么"等多选指向词汇时使用multi

                    **3. options数组生成规则**

                    + 选项数量：3-6个选项
                    + 按weight权重从高到低排序
                    + 选项需要覆盖用户可能的主要情况
                    + 选项之间应相互独立且具有区分度

                    **4. 单个option对象规则**

                    + **id**：使用英文标识，便于程序处理
                    + **label**：简洁的中文显示文本，不超过10字

                    **5. desc字段规则**

                    + **可选字段**：当问题需要补充说明或引导时使用
                    + **内容包含**：问题背景解释、选择引导、注意事项等
                    + **长度限制**：不超过100字
                    + **作用**：帮助用户理解问题含义和选择标准

                    **6. 选项设计原则**

                    + **全面性**：选项应覆盖80%以上的常见情况
                    + **互斥性**：单选时选项之间不应重叠
                    + **渐进性**：按重要程度或常见程度排序
                    + **简洁性**：选项文本清晰易懂

                    **7. 使用场景约束**

                    + **优先使用**：相比input类型和表单，选项形式用户体验最佳
                    + **适用情况**：问题有明确的选择边界和有限的答案空间
                    + **避免滥用**：不适合开放性问题或需要详细描述的情况

                    **8. 权重评分逻辑**

                    + 基于选项的常见程度和重要性评分
                    + 最符合用户可能需求的选项权重最高
                    + 权重相同时按逻辑顺序排列

                    ### 用户回答的JSON格式

                    + other1，other2 代表用户自己的输入内容

                    **具体示例**

                    单选示例：

                    ```json
                    {
                      "questionId": "project_urgency_001",
                      "answer": ["urgent", "other1"]
                    }
                    ```

                    多选示例：

                    ```json
                    {
                      "questionId": "required_features_002",
                      "answer": ["user_login", "payment_system", "admin_panel", "other1", "other2"]
                    }
                    ```

                    """;
}
